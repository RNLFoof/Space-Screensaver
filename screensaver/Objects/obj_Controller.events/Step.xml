<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">// Close
if mouse_start_x != mouse_x-view_xview[0] or mouse_start_y != mouse_y-view_yview[0]
{
    // game_end();
};
// Spawn shit
if fps &gt;= room_speed-5
{
    if irandom_range(0, 30) == 0 and instance_number(obj_Streaker) &lt; 6
    {
        instance_create(0,0,obj_Streaker);
    };
    if irandom_range(0, 3) == 0
    {
        instance_create(0,0,obj_Star);
    };
    if irandom_range(0, 100) == 0 and instance_number(obj_Nebula) &lt; 5
    {
        perp = random_range(-1,1);
        nebx = view_xview[0] + view_wview[0]/2 
            //+ lengthdir_x(random(view_wview[0]*1.5), random(360)) 
            + lengthdir_x(900*obj_Controller.truespeed, obj_Controller.direction)
            + lengthdir_x(room_width*perp, obj_Controller.direction+90);
        neby = view_yview[0] + view_hview[0]/2
            // + lengthdir_y(random(view_wview[0]*1.5), random(360)) 
            + lengthdir_y(900*obj_Controller.truespeed, obj_Controller.direction)
            + lengthdir_y(room_width*perp, obj_Controller.direction+90);
        instance_create(nebx,neby,obj_Nebula);
        if irandom(1) == 1
            instance_create(nebx,neby,obj_Nebula);
        if irandom(1) == 1
            instance_create(nebx,neby,obj_Nebula);
    };
    if irandom_range(0, 0) == -1 and instance_number(obj_Sun) &lt; 1
    {
        instance_create(0,0,obj_Sun);
    };
};
// Move
ss = 90/(fps+00.1);
truespeed = ((truespeed * togoalfeetbricks) + goalspeed) / (togoalfeetbricks+1);
trueangplus = ((trueangplus * togoalfeetbricks) + goalangplus) / (togoalfeetbricks+1);
direction += trueangplus;
camx += lengthdir_x(truespeed*cammultiplier, direction)*ss;
camy += lengthdir_y(truespeed*cammultiplier, direction)*ss;
view_xview[0] = camx / cammultiplier;
view_yview[0] = camy / cammultiplier;
</argument>
      </arguments>
    </action>
  </actions>
</event>
